// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders empty chat 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
</View>
`;

exports[`renders non-empty chat 1`] = `
<View
  onLayout={[Function]}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    onLayout={[Function]}
    style={
      Object {
        "flex": 1,
      }
    }
  />
</View>
`;

exports[`renders the neighbors list 1`] = `
<View
  style={
    Object {
      "flex": 1,
    }
  }
>
  <View
    style={
      Object {
        "alignItems": "center",
        "backgroundColor": "white",
        "borderBottomColor": "#92a2a2",
        "borderBottomWidth": 0.5,
        "flexDirection": "row",
        "padding": 10,
      }
    }
  >
    <Text
      accessible={true}
      allowFontScaling={true}
      ellipsizeMode="tail"
    />
    <TextInput
      allowFontScaling={true}
      onChangeText={[Function]}
      placeholder="Buscar"
      style={
        Object {
          "flex": 1,
          "paddingHorizontal": 10,
        }
      }
      underlineColorAndroid="transparent"
      value=""
    />
  </View>
  <RCTScrollView
    data={
      Array [
        Object {
          "apartments": Array [
            Object {
              "id": 1,
              "number": "1",
            },
          ],
          "id": 1,
          "last_name": "neighbor",
          "name": "test",
        },
      ]
    }
    disableVirtualization={false}
    getItem={[Function]}
    getItemCount={[Function]}
    horizontal={false}
    initialNumToRender={10}
    keyExtractor={[Function]}
    maxToRenderPerBatch={10}
    numColumns={1}
    onContentSizeChange={[Function]}
    onEndReachedThreshold={2}
    onLayout={[Function]}
    onMomentumScrollEnd={[Function]}
    onScroll={[Function]}
    onScrollBeginDrag={[Function]}
    onScrollEndDrag={[Function]}
    renderItem={[Function]}
    scrollEventThrottle={50}
    stickyHeaderIndices={Array []}
    updateCellsBatchingPeriod={50}
    viewabilityConfigCallbackPairs={Array []}
    windowSize={21}
  >
    <View>
      <View
        onLayout={[Function]}
        style={null}
      >
        <View
          accessibilityComponentType={undefined}
          accessibilityLabel={undefined}
          accessibilityTraits={undefined}
          accessible={true}
          collapsable={undefined}
          hasTVPreferredFocus={undefined}
          hitSlop={undefined}
          isTVSelectable={true}
          nativeID={undefined}
          onLayout={undefined}
          onResponderGrant={[Function]}
          onResponderMove={[Function]}
          onResponderRelease={[Function]}
          onResponderTerminate={[Function]}
          onResponderTerminationRequest={[Function]}
          onStartShouldSetResponder={[Function]}
          style={
            Object {
              "alignItems": "center",
              "backgroundColor": "white",
              "borderBottomColor": "#92a2a2",
              "borderBottomWidth": 0.5,
              "flexDirection": "row",
              "opacity": 1,
              "padding": 10,
            }
          }
          testID={undefined}
          tvParallaxProperties={undefined}
        >
          <View
            style={undefined}
          >
            <View
              style={
                Array [
                  Object {
                    "alignSelf": "center",
                    "backgroundColor": "#92a2a2",
                    "justifyContent": "center",
                    "marginRight": 5,
                  },
                  Object {
                    "borderRadius": 20,
                    "height": 40,
                    "width": 40,
                  },
                ]
              }
            >
              <View
                style={
                  Object {
                    "alignItems": "center",
                    "bottom": 0,
                    "justifyContent": "center",
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  }
                }
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={
                    Array [
                      Object {
                        "color": "white",
                      },
                      Object {
                        "fontSize": 30,
                      },
                    ]
                  }
                >
                  T
                </Text>
              </View>
              <Image
                onLoad={[Function]}
                source={
                  Object {
                    "uri": undefined,
                  }
                }
                style={
                  Object {
                    "borderRadius": 20,
                    "height": 40,
                    "width": 40,
                  }
                }
              />
            </View>
          </View>
          <Text
            accessible={true}
            allowFontScaling={true}
            ellipsizeMode="tail"
          >
            test
             de 
            1
          </Text>
        </View>
      </View>
    </View>
  </RCTScrollView>
</View>
`;
